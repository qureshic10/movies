{"version":3,"sources":["services/httpService.js","services/authService.js","components/common/like.jsx","components/common/tableBody.jsx","components/common/tableHeader.jsx","components/common/table.jsx","components/moviesTable.jsx","components/common/listGroup.jsx","components/common/pagination.jsx","services/movieService.js","services/genreService.js","utils/paginate.js","components/common/searchBox.jsx","components/movies.jsx","components/customers.jsx","components/rentals.jsx","components/notFound.jsx","components/common/input.jsx","components/common/select.jsx","components/common/form.jsx","components/movieForm.jsx","components/navBar.jsx","components/loginForm.jsx","services/userService.js","components/registerForm.jsx","components/logout.jsx","components/common/protectedRoute.jsx","App.js","reportWebVitals.js","index.js"],"names":["axios","defaults","baseURL","process","interceptors","response","use","error","status","console","log","toast","Promise","reject","get","post","put","delete","setJwt","jwt","headers","common","apiEndPoint","tokenKey","email","password","a","http","data","localStorage","setItem","getJwt","getItem","login","loginWithJwt","logout","removeItem","getCurrentUser","jwtdecode","ex","Like","props","classes","liked","onClick","style","cursor","className","aria-hidden","TableBody","renderCell","item","column","content","_","path","createKey","_id","key","this","columns","map","React","Component","TableHeader","raiseSort","sortColumn","order","onSort","renderSortIcon","label","Table","MoviesTable","movie","Link","to","title","onLike","deleteColumn","onDelete","user","auth","isAdmin","push","movies","ListGroup","items","textProperty","valueProperty","selectedItem","onItemSelect","defaultProps","Pagination","itemsCount","pageSize","currentPage","onPageChange","pagesCount","Math","ceil","pages","range","aria-label","page","movieUrl","id","getMovie","movieId","saveMovie","body","deleteMovie","getGenres","paginate","pageNumber","startIndex","slice","take","value","SearchBox","onChange","type","name","placeholder","e","currentTarget","Movies","state","genres","searchQuery","selectedGenre","handleDelete","originalMovies","filter","m","setState","success","handleLike","index","indexOf","handlePageChange","handleGenreSelect","genre","handleSearch","query","handleSort","getPagedData","allMovies","filtered","toLowerCase","startsWith","orderBy","totalCount","length","marginBottom","Customers","Rentals","NotFound","Input","rest","htmlFor","Select","options","option","Form","errors","validate","Joi","schema","abortEarly","details","message","validateProperty","obj","handleSubmit","preventDefault","doSubmit","handleChange","input","errorMessage","renderInput","disabled","MovieForm","genreId","numberInStock","dailyRentalRate","string","required","number","min","max","history","match","params","mapToViewModel","replace","populateGenres","populateMovies","onSubmit","renderSelect","renderButton","NavBar","data-bs-toggle","data-bs-target","aria-controls","aria-expanded","NavLink","aria-current","Fragment","LoginForm","username","location","window","from","pathname","Redirect","register","RegisterForm","userService","Logout","ProtectedRoute","component","render","Route","App","Switch","exact","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","REACT_APP_NAME","ReactDOM","StrictMode","BrowserRouter","document","getElementById"],"mappings":"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","file":"static/js/main.851bee52.chunk.js","sourcesContent":["//npm i axios@0.18.0\r\nimport axios from \"axios\";\r\nimport logger from \"./logService\";\r\n//npm i react-toastify@4.1.0 // After the installation add it in App component\r\nimport { toast } from \"react-toastify\";\r\n\r\naxios.defaults.baseURL = process.env.REACT_APP_API_URL;\r\n// Commenting the following line because httpService and authService are creating bidirectorional dependencies so we need to remove auth service\r\n//axios.defaults.headers.common[\"x-auth-token\"] = auth.getJwt(); // Our web api requires authentication so we need to add the token to our axios service header.\r\n\r\naxios.interceptors.response.use(null, (error) => {\r\n  const expectedError =\r\n    error.response &&\r\n    error.response.status >= 400 &&\r\n    error.response.status < 500;\r\n\r\n  if (!expectedError) {\r\n    console.log(\"Logging the error\", error);\r\n    toast.error(\"An unexpected error has occured\");\r\n  }\r\n\r\n  return Promise.reject(error);\r\n});\r\n\r\n// to remove bi-directional dependencies we have created this method and call it from authService\r\nfunction setJwt(jwt) {\r\n  axios.defaults.headers.common[\"x-auth-token\"] = jwt;\r\n}\r\n\r\nexport default {\r\n  get: axios.get,\r\n  post: axios.post,\r\n  put: axios.put,\r\n  delete: axios.delete,\r\n  setJwt,\r\n};\r\n","import jwtdecode from \"jwt-decode\"; // npm i jwt-decode@2.2.0\r\nimport http from \"./httpService\";\r\n//import { apiUrl } from \"../config.json\";\r\n\r\n//const apiEndPoint = apiUrl + \"/auth\";\r\nconst apiEndPoint = \"/auth\";\r\nconst tokenKey = \"token\";\r\n\r\n// to get rid of bi-directional dependencies we are setting token here.\r\nhttp.setJwt(getJwt());\r\n\r\nexport async function login(email, password) {\r\n  const { data: jwt } = await http.post(apiEndPoint, { email, password });\r\n  localStorage.setItem(tokenKey, jwt);\r\n}\r\n\r\nexport function loginWithJwt(jwt) {\r\n  localStorage.setItem(tokenKey, jwt);\r\n}\r\n\r\nexport function logout() {\r\n  localStorage.removeItem(tokenKey);\r\n}\r\n\r\nexport function getCurrentUser() {\r\n  // if the token is not available it will give error so to handle it add try catch block.\r\n  try {\r\n    const jwt = localStorage.getItem(tokenKey);\r\n    return jwtdecode(jwt);\r\n    //console.log(user);\r\n  } catch (ex) {\r\n    return null;\r\n  }\r\n}\r\n\r\nexport function getJwt() {\r\n  return localStorage.getItem(tokenKey);\r\n}\r\n\r\nexport default {\r\n  login,\r\n  loginWithJwt,\r\n  logout,\r\n  getCurrentUser,\r\n  getJwt,\r\n};\r\n","import React from \"react\";\r\n\r\n// Input: Liked: boolean\r\n// Output: onClick\r\n// Since this is a controlled component so make it statless functional component\r\n// We can't use this in statless functional component so remove all this from props.\r\n// Pass props as a parameter to statless functional component\r\nconst Like = (props) => {\r\n  let classes = \"fa fa-heart\";\r\n  if (!props.liked) classes += \"-o\";\r\n  return (\r\n    <i\r\n      onClick={props.onClick}\r\n      style={{ cursor: \"pointer\" }} // To change the cursor pointer to hand\r\n      className={classes}\r\n      aria-hidden=\"true\"\r\n    ></i>\r\n  );\r\n};\r\n\r\nexport default Like;\r\n","import React from \"react\";\r\nimport _ from \"lodash\";\r\n\r\nclass TableBody extends React.Component {\r\n  // clean up code\r\n  renderCell = (item, column) => {\r\n    if (column.content) return column.content(item); // for like and delete\r\n    return _.get(item, column.path); // for other data\r\n  };\r\n\r\n  createKey = (item, column) => {\r\n    return item._id + (column.path || column.key);\r\n  };\r\n\r\n  render() {\r\n    const { data, columns } = this.props;\r\n    return (\r\n      <tbody>\r\n        {data.map((item) => (\r\n          <tr key={item._id}>\r\n            {columns.map((column) => (\r\n              // we have used column.key for the like and delete button\r\n              <td key={this.createKey(item, column)}>\r\n                {this.renderCell(item, column)}\r\n              </td>\r\n            ))}\r\n          </tr>\r\n        ))}\r\n      </tbody>\r\n    );\r\n  }\r\n}\r\n\r\nexport default TableBody;\r\n","import React from \"react\";\r\n\r\n// columns : array\r\n// sortColumn : object\r\n// onSort : function\r\n\r\nclass TableHeader extends React.Component {\r\n  raiseSort = (path) => {\r\n    //console.log(path);\r\n    // const sortColumn = { ...this.state.sortColumn };\r\n    const sortColumn = { ...this.props.sortColumn }; // Here we are getting sortColumn from props instead of state\r\n    if (sortColumn.path === path)\r\n      sortColumn.order = sortColumn.order === \"asc\" ? \"desc\" : \"asc\";\r\n    else {\r\n      sortColumn.path = path;\r\n      sortColumn.order = \"asc\";\r\n    }\r\n\r\n    // before we were calling the onSort method on click now we will do the sorting first and then call just to update the state\r\n    this.props.onSort(sortColumn);\r\n  };\r\n\r\n  renderSortIcon = (column) => {\r\n    const { sortColumn } = this.props;\r\n    if (column.path !== sortColumn.path) return null;\r\n    if (sortColumn.order === \"asc\") return <i className=\"fa fa-sort-asc\" />;\r\n    return <i className=\"fa fa-sort-desc\" />;\r\n  };\r\n  render() {\r\n    return (\r\n      <thead>\r\n        <tr>\r\n          {this.props.columns.map((column) => (\r\n            <th\r\n              className=\"clickable\"\r\n              key={column.path || column.key}\r\n              onClick={() => this.raiseSort(column.path)}\r\n            >\r\n              {column.label}\r\n              {this.renderSortIcon(column)}\r\n            </th>\r\n          ))}\r\n        </tr>\r\n      </thead>\r\n    );\r\n  }\r\n}\r\n\r\nexport default TableHeader;\r\n","import React from \"react\";\r\nimport TableBody from \"./tableBody\";\r\nimport TableHeader from \"./tableHeader\";\r\n// const Table = (props) => {\r\n// const { columns, sortColumn, onSort, data } = props;\r\n// Destructuring Arguments\r\nconst Table = ({ columns, sortColumn, onSort, data }) => {\r\n  return (\r\n    <table className=\"table\">\r\n      <TableHeader columns={columns} sortColumn={sortColumn} onSort={onSort} />\r\n      <TableBody columns={columns} data={data} />\r\n    </table>\r\n  );\r\n};\r\n\r\nexport default Table;\r\n","import React from \"react\";\r\nimport auth from \"../services/authService\";\r\nimport Like from \"./common/like\";\r\nimport Table from \"./common/table\";\r\nimport { Link } from \"react-router-dom\";\r\nclass MoviesTable extends React.Component {\r\n  columns = [\r\n    {\r\n      path: \"title\",\r\n      label: \"Title\",\r\n      content: (movie) => (\r\n        <Link to={`/movies/${movie._id}`}>{movie.title}</Link>\r\n      ),\r\n    },\r\n    { path: \"genre.name\", label: \"Genre\" },\r\n    { path: \"numberInStock\", label: \"Stock\" },\r\n    { path: \"dailyRentalRate\", label: \"Rate\" },\r\n    {\r\n      key: \"like\",\r\n      content: (movie) => (\r\n        <Like\r\n          liked={movie.liked}\r\n          // onClick={() => this.handleLike(movie)}\r\n          onClick={() => this.props.onLike(movie)}\r\n        />\r\n      ),\r\n    },\r\n    // {\r\n    //   key: \"delete\",\r\n    //   content: (movie) => (\r\n    //     <button\r\n    //       // onClick={() => this.handleDelete(movie)}\r\n    //       onClick={() => this.props.onDelete(movie)}\r\n    //       className=\"btn btn-danger btn-sm\"\r\n    //     >\r\n    //       Delete\r\n    //     </button>\r\n    //   ),\r\n    // },\r\n  ];\r\n\r\n  deleteColumn = {\r\n    key: \"delete\",\r\n    content: (movie) => (\r\n      <button\r\n        // onClick={() => this.handleDelete(movie)}\r\n        onClick={() => this.props.onDelete(movie)}\r\n        className=\"btn btn-danger btn-sm\"\r\n      >\r\n        Delete\r\n      </button>\r\n    ),\r\n  };\r\n\r\n  // Created this constructer to hide the delete button if the user is not an admin.\r\n  constructor() {\r\n    super();\r\n    const user = auth.getCurrentUser();\r\n    if (user && user.isAdmin) {\r\n      this.columns.push(this.deleteColumn);\r\n    }\r\n  }\r\n\r\n  render() {\r\n    //const { movies, onDelete, onLike, onSort } = this.props; // use this.props because it is not a parameter here\r\n    // const { movies, onDelete, onLike } = this.props; // onSort is not used anymore so we have deleted that\r\n    const { movies, onSort, sortColumn } = this.props;\r\n\r\n    return (\r\n      <Table\r\n        columns={this.columns}\r\n        data={movies}\r\n        sortColumn={sortColumn}\r\n        onSort={onSort}\r\n      />\r\n\r\n      /* Following syntax is to generate markup of table. //\r\n      table.table>thead>tr>th*4 */\r\n      //   <table className=\"table\">\r\n      //     {/* <thead>\r\n      //       <tr>\r\n      //         <th onClick={() => this.raiseSort(\"title\")}>Title</th>\r\n      //         <th onClick={() => this.raiseSort(\"genre.name\")}>Genre</th>\r\n      //         <th onClick={() => this.raiseSort(\"numberInStock\")}>Stock</th>\r\n      //         <th onClick={() => this.raiseSort(\"dailyRentalRate\")}>Rate</th>\r\n      //         <th></th>\r\n      //         <th></th>\r\n      //       </tr>\r\n      //     </thead> */}\r\n      //     <TableHeader\r\n      //       columns={this.columns}\r\n      //       sortColumn={sortColumn}\r\n      //       onSort={onSort}\r\n      //     />\r\n      //     <TableBody columns={this.columns} data={movies} />\r\n      //     {/* <tbody> */}\r\n      //     {/* {this.state.movies.map((movie) => ( */}\r\n      //     {/* use movies object in this method  */}\r\n      //     {/* {movies.map((movie) => (\r\n      //         <tr key={movie._id}>\r\n      //           <td>{movie.title}</td>\r\n      //           <td>{movie.genre.name}</td>\r\n      //           <td>{movie.numberInStock}</td>\r\n      //           <td>{movie.dailyRentalRate}</td>\r\n      //           <td>\r\n      //             <Like\r\n      //               liked={movie.liked}\r\n      //               // onClick={() => this.handleLike(movie)}\r\n      //               onClick={() => onLike(movie)}\r\n      //             />\r\n      //           </td>\r\n      //           <td>\r\n      //             <button\r\n      //               // onClick={() => this.handleDelete(movie)}\r\n      //               onClick={() => onDelete(movie)}\r\n      //               className=\"btn btn-danger btn-sm\"\r\n      //             >\r\n      //               Delete\r\n      //             </button>\r\n      //           </td>\r\n      //         </tr>\r\n      //       ))}\r\n      //     </tbody> */}\r\n      //   </table>\r\n    );\r\n  }\r\n}\r\n\r\nexport default MoviesTable;\r\n","import React from \"react\";\r\n\r\nconst ListGroup = (props) => {\r\n  const { items, textProperty, valueProperty, selectedItem, onItemSelect } =\r\n    props; // Object Destructuring\r\n  return (\r\n    <ul className=\"list-group\">\r\n      {items.map((item) => (\r\n        // <li key={item._id} class=\"list-group-item\">\r\n        //   {item.name}\r\n        // </li>\r\n        // To make it dynamic we will pass text and value property dynamically from props\r\n        <li\r\n          onClick={() => onItemSelect(item)}\r\n          key={item[valueProperty]}\r\n          className={\r\n            item === selectedItem ? \"list-group-item active\" : \"list-group-item\"\r\n          }\r\n        >\r\n          {item[textProperty]}\r\n        </li>\r\n      ))}\r\n    </ul>\r\n  );\r\n};\r\n\r\nListGroup.defaultProps = {\r\n  textProperty: \"name\",\r\n  valueProperty: \"_id\",\r\n};\r\nexport default ListGroup;\r\n","import React from \"react\";\r\nimport _ from \"lodash\"; // underscore. it is used to generate arrays\r\n// npm i prop-types@15.6.2 // Install prop-types from terminal\r\nimport PropTypes from \"prop-types\"; // For type checking\r\n\r\nconst Pagination = (props) => {\r\n  const { itemsCount, pageSize, currentPage, onPageChange } = props; // objectDestructuring\r\n  //console.log(currentPage); // Just to verify that we are getting the currentPage from movies.jsx\r\n  const pagesCount = Math.ceil(itemsCount / pageSize); // convert the pageCount to closest integer number\r\n  if (pagesCount === 1) return null; // If pageCount = 1 we will not show pagination\r\n  const pages = _.range(1, pagesCount + 1); // lodash to generate array for a range from 1 to pageCount\r\n\r\n  return (\r\n    <nav aria-label=\"Page navigation example\">\r\n      <ul className=\"pagination\">\r\n        {pages.map((page) => (\r\n          <li\r\n            key={page}\r\n            className={page === currentPage ? \"page-item active\" : \"page-item\"}\r\n          >\r\n            <a className=\"page-link\" onClick={() => onPageChange(page)}>\r\n              {page}\r\n            </a>\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    </nav>\r\n  );\r\n};\r\n\r\n// For checking types of the props\r\n// When use components it is a good practice to use propTypes to catch bugs\r\nPagination.propTypes = {\r\n  itemsCount: PropTypes.number.isRequired,\r\n  pageSize: PropTypes.number.isRequired,\r\n  currentPage: PropTypes.number.isRequired,\r\n  onPageChange: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default Pagination;\r\n","import http from \"./httpService\";\r\n// import { apiUrl } from \"../config.json\";\r\n//const apiEndPoint = apiUrl + \"/movies\";\r\nconst apiEndPoint = \"/movies\";\r\n\r\n// we are not exporting this function because this function is not required outside this service.\r\nfunction movieUrl(id) {\r\n  return `${apiEndPoint}/${id}`;\r\n}\r\n\r\nexport function getMovies() {\r\n  return http.get(apiEndPoint);\r\n}\r\n\r\nexport function getMovie(movieId) {\r\n  return http.get(movieUrl(movieId));\r\n}\r\n\r\nexport function saveMovie(movie) {\r\n  if (movie._id) {\r\n    const body = { ...movie };\r\n    delete body._id;\r\n    return http.put(movieUrl(movie._id), body);\r\n  }\r\n\r\n  return http.post(apiEndPoint, movie);\r\n}\r\n\r\nexport function deleteMovie(movieId) {\r\n  return http.delete(movieUrl(movieId));\r\n}\r\n","import http from \"./httpService\";\r\n//import config from \"../config.json\";\r\n//import { apiUrl } from \"../config.json\"; // Object destructuring\r\n\r\nexport function getGenres() {\r\n  //return http.get((config.apiURL = \"/genres\"));\r\n  //return http.get(apiUrl + \"/genres\");\r\n  return http.get(\"/genres\");\r\n}\r\n","import _ from \"lodash\"; // underscore. it is used to generate arrays\r\n\r\nexport function paginate(items, pageNumber, pageSize) {\r\n  const startIndex = (pageNumber - 1) * pageSize;\r\n  return _(items).slice(startIndex).take(pageSize).value();\r\n  //   _.slice(items, startIndex) // To slice the array from the starting index\r\n  //   _.take() // take the required chunk of array from the total items\r\n}\r\n","import React from \"react\";\r\n\r\nconst SearchBox = ({ value, onChange }) => {\r\n  return (\r\n    <input\r\n      type=\"text\"\r\n      name=\"query\"\r\n      className=\"form-control my-3\"\r\n      placeholder=\"Search...\"\r\n      value={value}\r\n      onChange={(e) => onChange(e.currentTarget.value)}\r\n    />\r\n  );\r\n};\r\n\r\nexport default SearchBox;\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { toast } from \"react-toastify\";\r\nimport MoviesTable from \"./moviesTable\";\r\nimport ListGroup from \"./common/listGroup\";\r\nimport Pagination from \"./common/pagination\";\r\nimport { getMovies, deleteMovie } from \"../services/movieService\";\r\n//import { getMovies } from \"../services/fakeMovieService\";\r\nimport { getGenres } from \"../services/genreService\";\r\n//import { getGenres } from \"../services/fakeGenreService\";\r\nimport { paginate } from \"../utils/paginate\";\r\n//import Like from \"./common/like\"; // We need it in moviesTable.jsx\r\nimport _ from \"lodash\";\r\nimport SearchBox from \"./common/searchBox\";\r\n\r\nclass Movies extends React.Component {\r\n  state = {\r\n    movies: [],\r\n    genres: [],\r\n    currentPage: 1,\r\n    pageSize: 4,\r\n    searchQuery: \"\",\r\n    selectedGenre: null,\r\n    sortColumn: { path: \"title\", order: \"asc\" },\r\n  };\r\n\r\n  async componentDidMount() {\r\n    // Genre from genreService.js which will get data from webapi\r\n    const { data } = await getGenres();\r\n    const genres = [{ _id: \"\", name: \"All Genres\" }, ...data];\r\n\r\n    // movies from movieService.js which will get data from webapi\r\n    const { data: movies } = await getMovies();\r\n\r\n    this.setState({ movies, genres }); // Now we will use the constant variable only because key and values are same\r\n  }\r\n\r\n  // componentDidMount() {\r\n  //   // Genre from fakGenreService.js\r\n  //   const genres = [{ _id: \"\", name: \"All Genres\" }, ...getGenres()]; // Now we will add All Genres to the array with only name because we don't need id to filter. _id must be added error to avoid error in the console\r\n  //   // this.setState({ movies: getMovies(), getGenres() });\r\n  //   this.setState({ movies: getMovies(), genres }); // Now we will use the constant variable only because key and values are same\r\n  // }\r\n\r\n  // Delete a movie. You can filter the selected movie with with the delete button is pressed.\r\n  // Following we have filtered the deleted movie.\r\n  // handleDelete = (movie) => {\r\n  //   const movies = this.state.movies.filter((m) => m._id !== movie._id);\r\n  //   this.setState({ movies: movies });\r\n  // };\r\n\r\n  // Delete movies from webapi\r\n  // If you get Access denied error here it means user is not admin. Add a isAdmin field to users document from MongoDB and set it to true with datatype boolean.\r\n\r\n  handleDelete = async (movie) => {\r\n    const originalMovies = this.state.movies;\r\n    const movies = originalMovies.filter((m) => m._id !== movie._id);\r\n    this.setState({ movies });\r\n\r\n    try {\r\n      await deleteMovie(movie._id);\r\n      toast.success(\"The movie has been deleted successfully!\");\r\n    } catch (ex) {\r\n      if (ex.response && ex.response.status === 404)\r\n        toast.error(\"This movie has already been deleted!\");\r\n\r\n      this.setState({ movies: originalMovies });\r\n    }\r\n  };\r\n\r\n  handleLike = (movie) => {\r\n    //movie.liked === true ? !movie.liked : movie.liked;\r\n    const movies = [...this.state.movies];\r\n    const index = movies.indexOf(movie);\r\n    movies[index] = { ...movies[index] };\r\n    movies[index].liked = !movies[index].liked;\r\n    //console.log(\"Like Cliked\", movie);\r\n    this.setState({ movies });\r\n  };\r\n\r\n  handlePageChange = (page) => {\r\n    this.setState({ currentPage: page }); //to update the state and reload the pagination component\r\n  };\r\n\r\n  handleGenreSelect = (genre) => {\r\n    // this.setState({ selectedGenre: genre }); // to highlight the selected item from list group\r\n    // searchQuery will be empty here because when we select genre it will clear all the filters. We are using controlled components so we will use empty string for the react to understand.\r\n    this.setState({ selectedGenre: genre, searchQuery: \"\", currentPage: 1 }); // reset the page to 1 to show the 1st page\r\n  };\r\n\r\n  handleSearch = (query) => {\r\n    this.setState({ searchQuery: query, selectedGenre: null, currentPage: 1 });\r\n  };\r\n\r\n  handleSort = (sortColumn) => {\r\n    //this.setState({ sortColumn: { path, order: \"asc\" } });\r\n    this.setState({ sortColumn });\r\n  };\r\n\r\n  getPagedData = () => {\r\n    const {\r\n      pageSize,\r\n      currentPage,\r\n      sortColumn,\r\n      selectedGenre,\r\n      searchQuery,\r\n      movies: allMovies,\r\n    } = this.state; // ObjectDestructuring\r\n\r\n    let filtered = allMovies;\r\n\r\n    if (searchQuery)\r\n      filtered = allMovies.filter((m) =>\r\n        m.title.toLowerCase().startsWith(searchQuery.toLowerCase())\r\n      );\r\n    else if (selectedGenre && selectedGenre._id)\r\n      filtered = allMovies.filter((m) => m.genre._id === selectedGenre._id);\r\n\r\n    // we have added && selectedGenre._id to show all genres incase there is no id\r\n    // We have commented the following filter because now we have 2 filters. 1 with search box and other with listgroup\r\n    // const filtered =\r\n    //   selectedGenre && selectedGenre._id\r\n    //     ? allMovies.filter((m) => m.genre._id === selectedGenre._id)\r\n    //     : allMovies; // filter out the movies based on selected genre or show all movies.\r\n\r\n    // Here we will implement sorting after filtering the data. We will use lodash\r\n    const sorted = _.orderBy(filtered, [sortColumn.path], [sortColumn.order]);\r\n    //  const movies = paginate(allMovies, currentPage, pageSize);\r\n    //const movies = paginate(filtered, currentPage, pageSize); // before we were passing all movies now we will pass only filtered movies\r\n    const movies = paginate(sorted, currentPage, pageSize); // before we were passing filtered movies now we will pass only sorted movies\r\n\r\n    return { totalCount: filtered.length, data: movies };\r\n  };\r\n\r\n  render() {\r\n    // assign a length property of the movies array to count constant so that we can reuse it.\r\n    const { length: count } = this.state.movies; // ObjectDestructuring\r\n    const { pageSize, currentPage, sortColumn, searchQuery } = this.state; // ObjectDestructuring\r\n    const { user } = this.props;\r\n\r\n    //if (count === 0) return <p>There are no movies in the database.</p>;\r\n\r\n    const { totalCount, data: movies } = this.getPagedData();\r\n\r\n    return (\r\n      // There can be only 1 element that we can return. So we wrap the content in react.Fragment.\r\n      <div className=\"row\">\r\n        <div className=\"col-3\">\r\n          <ListGroup\r\n            items={this.state.genres}\r\n            selectedItem={this.state.selectedGenre}\r\n            // Commenting this code because of using default props in ListGroup.jsx file\r\n            // textProperty=\"name\"\r\n            // valueProperty=\"_id\"\r\n            onItemSelect={this.handleGenreSelect}\r\n          />\r\n        </div>\r\n        <div className=\"col\">\r\n          {user && (\r\n            <Link\r\n              to=\"/movies/new\"\r\n              className=\"btn btn-primary\"\r\n              style={{ marginBottom: 20 }}\r\n            >\r\n              New Movie\r\n            </Link>\r\n          )}\r\n\r\n          {/* <p>Showing {count} movies in the database.</p> */}\r\n          {/* Now we will show filtered count */}\r\n          {/* <p>Showing {filtered.length} movies in the database.</p> */}\r\n          {/* totalCount is coming from extracted method getPagedData */}\r\n          <p>\r\n            Showing {totalCount} movies in the database.\r\n            <SearchBox value={searchQuery} onChange={this.handleSearch} />\r\n          </p>\r\n\r\n          <MoviesTable\r\n            movies={movies}\r\n            sortColumn={sortColumn} // Now we are doing the sorting on moviesTable.jsx\r\n            onLike={this.handleLike}\r\n            onDelete={this.handleDelete}\r\n            onSort={this.handleSort}\r\n          />\r\n          <Pagination\r\n            // itemsCount={count}\r\n            //itemsCount={filtered.length} // if we are flitering we need to pass the length of the filtered movies.\r\n            itemsCount={totalCount} // totalCount is coming from extracted method getPagedData\r\n            pageSize={pageSize}\r\n            currentPage={currentPage}\r\n            onPageChange={this.handlePageChange}\r\n          />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Movies;\r\n","import React from \"react\";\r\n\r\nconst Customers = () => {\r\n  return <h1>Customers</h1>;\r\n};\r\n\r\nexport default Customers;\r\n","import React from \"react\";\r\n\r\nconst Rentals = () => {\r\n  return <h1>Rentals</h1>;\r\n};\r\n\r\nexport default Rentals;\r\n","import React from \"react\";\r\n\r\nconst NotFound = () => {\r\n  return <h1>Not Found</h1>;\r\n};\r\n\r\nexport default NotFound;\r\n","import React from \"react\";\r\n\r\n// const Input = ({ type, name, label, value, error, onChange }) => {\r\n// we use rest property to get the other props from rest.\r\nconst Input = ({ name, label, error, ...rest }) => {\r\n  return (\r\n    <div className=\"form-group\">\r\n      <label htmlFor={name}>{label}</label>\r\n      <input\r\n        //autoFocus\r\n        //ref={this.userName} // This ref attribute is used to refer this element with userName\r\n        // value={value} // controlled elements\r\n        // onChange={onChange}\r\n        // type={type}\r\n        {...rest} // This is exactly equivalent to the code written up if the value and key are same. Rest includes the properties other than name, value and error\r\n        name={name}\r\n        id={name}\r\n        className=\"form-control\"\r\n      />\r\n      {/* if error is true then this div will show. This is conditional rendering */}\r\n      {error && <div className=\"alert alert-danger\">{error}</div>}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Input;\r\n","import React from \"react\";\r\n\r\nconst Select = ({ name, label, options, error, ...rest }) => {\r\n  return (\r\n    <div className=\"form-group\">\r\n      <label htmlFor={name}>{label}</label>\r\n      <select name={name} id={name} {...rest} className=\"form-control\">\r\n        <option value=\"\" />\r\n        {options.map((option) => (\r\n          <option key={option._id} value={option._id}>\r\n            {option.name}\r\n          </option>\r\n        ))}\r\n      </select>\r\n      {error && <div className=\"alert alert-danger\">{error}</div>}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Select;\r\n","import React from \"react\";\r\nimport Joi from \"joi-browser\";\r\nimport Input from \"./input\";\r\nimport Select from \"./select\";\r\n\r\nclass Form extends React.Component {\r\n  state = {\r\n    // Rule of thumb: Initialize values with empty strings or load from servers to avoid any warning on the console. For controlled elements it will give warnings.\r\n    data: {},\r\n    errors: {},\r\n  };\r\n\r\n  validate = () => {\r\n    // instead of result we can directly access the error property. Instead of passing direct prop we can assign abort early to option constant and use it in validate method.\r\n    const options = { abortEarly: false };\r\n    const { error } = Joi.validate(this.state.data, this.schema, options);\r\n\r\n    if (!error) return null;\r\n    const errors = {};\r\n    // We will use the following loop to get the message and convert it into an object\r\n    for (let item of error.details) errors[item.path[0]] = item.message;\r\n    return errors;\r\n  };\r\n\r\n  // We will use ES6 computed properties to get the name of the element\r\n  validateProperty = ({ name, value }) => {\r\n    const obj = { [name]: value };\r\n    // We can't use this.schema which is entire form so we will get a sub schema from the main schema and get only the field which we are validating.\r\n    const schema = { [name]: this.schema[name] };\r\n    const { error } = Joi.validate(obj, schema);\r\n\r\n    return error ? error.details[0].message : null;\r\n  };\r\n\r\n  handleSubmit = (e) => {\r\n    e.preventDefault();\r\n\r\n    const errors = this.validate();\r\n    // console.log(errors);\r\n    this.setState({ errors: errors || {} }); // if error is null return empty object to avoid can not read property error whereever error object used\r\n\r\n    if (errors) return;\r\n\r\n    this.doSubmit();\r\n  };\r\n\r\n  handleChange = ({ currentTarget: input }) => {\r\n    const errors = { ...this.state.errors };\r\n    const errorMessage = this.validateProperty(input);\r\n    if (errorMessage) errors[input.name] = errorMessage;\r\n    else delete errors[input.name];\r\n    const data = { ...this.state.data };\r\n    //data.username = e.currentTarget.value;\r\n    data[input.name] = input.value; // We can access the state when passed as a parameter like this\r\n    this.setState({ data, errors });\r\n  };\r\n\r\n  renderButton(label) {\r\n    return (\r\n      <button disabled={this.validate()} className=\"btn btn-primary\">\r\n        {label}\r\n      </button>\r\n    );\r\n  }\r\n\r\n  renderSelect(name, label, options) {\r\n    const { data, errors } = this.state;\r\n    return (\r\n      <Select\r\n        name={name}\r\n        value={data[name]}\r\n        label={label}\r\n        options={options}\r\n        onChange={this.handleChange}\r\n        error={errors[name]}\r\n      />\r\n    );\r\n  }\r\n\r\n  renderInput = (name, label, type = \"text\") => {\r\n    const { data, errors } = this.state;\r\n    return (\r\n      <Input\r\n        type={type}\r\n        name={name}\r\n        value={data[name]}\r\n        label={label}\r\n        onChange={this.handleChange}\r\n        error={errors[name]}\r\n      />\r\n    );\r\n  };\r\n}\r\n\r\nexport default Form;\r\n","import React from \"react\";\r\nimport Joi from \"joi-browser\";\r\nimport Form from \"./common/form\";\r\n//import { getMovie, saveMovie } from \"../services/fakeMovieService\";\r\nimport { getMovie, saveMovie } from \"../services/movieService\";\r\nimport { getGenres } from \"../services/genreService\";\r\n\r\nclass MovieForm extends Form {\r\n  state = {\r\n    data: { title: \"\", genreId: \"\", numberInStock: \"\", dailyRentalRate: \"\" },\r\n    genres: [],\r\n    errors: {},\r\n  };\r\n\r\n  schema = {\r\n    _id: Joi.string(),\r\n    title: Joi.string().required().label(\"Title\"),\r\n    genreId: Joi.string().required().label(\"Genre\"),\r\n    numberInStock: Joi.number()\r\n      .required()\r\n      .min(0)\r\n      .max(100)\r\n      .label(\"Number in Stock\"),\r\n    dailyRentalRate: Joi.number()\r\n      .required()\r\n      .min(0)\r\n      .max(10)\r\n      .label(\"Daily Rental Rate\"),\r\n  };\r\n\r\n  async populateGenres() {\r\n    const { data: genres } = await getGenres();\r\n    this.setState({ genres });\r\n  }\r\n\r\n  async populateMovies() {\r\n    try {\r\n      const movieId = this.props.match.params.id;\r\n      if (movieId === \"new\") return;\r\n\r\n      const { data: movie } = await getMovie(movieId);\r\n      this.setState({ data: this.mapToViewModel(movie) });\r\n    } catch (ex) {\r\n      if (ex.response && ex.response.status === 404)\r\n        return this.props.history.replace(\"/not-found\");\r\n    }\r\n  }\r\n\r\n  // refactoring\r\n  async componentDidMount() {\r\n    await this.populateGenres();\r\n    await this.populateMovies();\r\n  }\r\n\r\n  // // get data from webapi\r\n  // async componentDidMount() {\r\n  //   const { data: genres } = await getGenres();\r\n  //   this.setState({ genres });\r\n  //   const movieId = this.props.match.params.id;\r\n  //   if (movieId === \"new\") return;\r\n\r\n  //   try {\r\n  //     const { data: movie } = await getMovie(movieId);\r\n  //     this.setState({ data: this.mapToViewModel(movie) });\r\n  //   } catch (ex) {\r\n  //     if (ex.response && ex.response.status === 404)\r\n  //       return this.props.history.replace(\"/not-found\");\r\n  //   }\r\n  // }\r\n\r\n  // componentDidMount() {\r\n  //   const genres = getGenres();\r\n  //   this.setState({ genres });\r\n\r\n  //   const movieId = this.props.match.params.id;\r\n  //   if (movieId === \"new\") return;\r\n\r\n  //   const movie = getMovie(movieId);\r\n  //   if (!movie) return this.props.history.replace(\"/not-found\");\r\n  //   this.setState({ data: this.mapToViewModel(movie) });\r\n  // }\r\n\r\n  mapToViewModel(movie) {\r\n    return {\r\n      _id: movie._id,\r\n      title: movie.title,\r\n      genreId: movie.genre._id,\r\n      numberInStock: movie.numberInStock,\r\n      dailyRentalRate: movie.dailyRentalRate,\r\n    };\r\n  }\r\n\r\n  doSubmit = async () => {\r\n    await saveMovie(this.state.data);\r\n    this.props.history.push(\"/movies\");\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h1>Movie Form</h1>\r\n        <form onSubmit={this.handleSubmit}>\r\n          {this.renderInput(\"title\", \"Title\")}\r\n          {this.renderSelect(\"genreId\", \"Genre\", this.state.genres)}\r\n          {this.renderInput(\"numberInStock\", \"Number in Stock\", \"number\")}\r\n          {this.renderInput(\"dailyRentalRate\", \"Rate\")}\r\n          {this.renderButton(\"Save\")}\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default MovieForm;\r\n","import React from \"react\";\r\nimport { Link, NavLink } from \"react-router-dom\";\r\n\r\nconst NavBar = ({ user }) => {\r\n  return (\r\n    <nav className=\"navbar navbar-expand-lg navbar-light bg-light\">\r\n      <div className=\"container-fluid\">\r\n        <Link className=\"navbar-brand\" to=\"#\">\r\n          Vidly\r\n        </Link>\r\n        <button\r\n          className=\"navbar-toggler\"\r\n          type=\"button\"\r\n          data-bs-toggle=\"collapse\"\r\n          data-bs-target=\"#navbarNavAltMarkup\"\r\n          aria-controls=\"navbarNavAltMarkup\"\r\n          aria-expanded=\"false\"\r\n          aria-label=\"Toggle navigation\"\r\n        >\r\n          <span className=\"navbar-toggler-icon\"></span>\r\n        </button>\r\n        <div className=\"collapse navbar-collapse\" id=\"navbarNavAltMarkup\">\r\n          <div className=\"navbar-nav\">\r\n            <NavLink\r\n              className=\"nav-link active\"\r\n              aria-current=\"page\"\r\n              to=\"/movies\"\r\n            >\r\n              Movies\r\n            </NavLink>\r\n            <NavLink className=\"nav-link\" to=\"/customers\">\r\n              Customers\r\n            </NavLink>\r\n            <NavLink className=\"nav-link\" to=\"/rentals\">\r\n              Rentals\r\n            </NavLink>\r\n            {!user && (\r\n              <React.Fragment>\r\n                <NavLink className=\"nav-link\" to=\"/login\">\r\n                  Login\r\n                </NavLink>\r\n                <NavLink className=\"nav-link\" to=\"/register\">\r\n                  Register\r\n                </NavLink>\r\n              </React.Fragment>\r\n            )}\r\n            {user && (\r\n              <React.Fragment>\r\n                <NavLink className=\"nav-link\" to=\"/profile\">\r\n                  {user.name}\r\n                </NavLink>\r\n                <NavLink className=\"nav-link\" to=\"/logout\">\r\n                  Logout\r\n                </NavLink>\r\n              </React.Fragment>\r\n            )}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </nav>\r\n  );\r\n};\r\n\r\nexport default NavBar;\r\n","import React from \"react\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport Joi from \"joi-browser\";\r\n// import Input from \"./common/input\";\r\nimport Form from \"./common/form\";\r\n// npm i joi-browser@13.4 // Package for validation\r\n//import { login } from \"./../services/authService\";\r\nimport auth from \"./../services/authService\";\r\n\r\nclass LoginForm extends Form {\r\n  state = {\r\n    // Rule of thumb: Initialize values with empty strings or load from servers to avoid any warning on the console. For controlled elements it will give warnings.\r\n    data: { username: \"\", password: \"\" },\r\n    errors: {},\r\n  };\r\n\r\n  // Joi implementation. First step is to create an schema and initialize fields with validators\r\n  // We can use the label property for friendly name.\r\n  schema = {\r\n    username: Joi.string().required().label(\"Username\"),\r\n    password: Joi.string().required().label(\"Password\"),\r\n  };\r\n\r\n  //   validate = () => {\r\n  //     // Call the Joi.validate method and assign abortEarly to false if you want the form to validate all fields. Otherwise it will validate the first field and abort others if there is any error\r\n  //     // const result = Joi.validate(this.state.data, this.schema, {\r\n  //     //   abortEarly: false,\r\n  //     // });\r\n\r\n  //     // instead of result we can directly access the error property. Instead of passing direct prop we can assign abort early to option constant and use it in validate method.\r\n  //     const options = { abortEarly: false };\r\n  //     const { error } = Joi.validate(this.state.data, this.schema, options);\r\n\r\n  //     if (!error) return null;\r\n  //     const errors = {};\r\n  //     // We will use the following loop to get the message and convert it into an object\r\n  //     for (let item of error.details) errors[item.path[0]] = item.message;\r\n  //     return errors;\r\n\r\n  //     // console.log(result);\r\n\r\n  //     // const errors = {};\r\n  //     // const { data } = this.state;\r\n  //     // if (data.username.trim() === \"\")\r\n  //     //   errors.username = \"Username is required\";\r\n  //     // if (data.password.trim() === \"\")\r\n  //     //   errors.password = \"Password is required\";\r\n\r\n  //     // return Object.keys(errors).length === 0 ? null : errors; // if the length of object keys is 0 it will return null which means validation is successful\r\n  //   };\r\n  //userName = React.createRef(); // This is used to refer a field\r\n\r\n  //LifeCycle hook to give a focus to the userName\r\n  //   componentDidMount() {\r\n  //     this.userName.current.focus();\r\n  //   }\r\n\r\n  //   handleSubmit = (e) => {\r\n  //     e.preventDefault();\r\n\r\n  //     const errors = this.validate();\r\n  //     // console.log(errors);\r\n  //     this.setState({ errors: errors || {} }); // if error is null return empty object to avoid can not read property error whereever error object used\r\n\r\n  //     if (errors) return;\r\n  //     // How to access a ref property value.\r\n  //     //const userName = this.userName.current.value;\r\n  //   };\r\n\r\n  doSubmit = async () => {\r\n    // Call the server\r\n    //console.log(\"Submitted\");\r\n    try {\r\n      const { data } = this.state;\r\n      //await login(data.username, data.password);\r\n      //const { data: jwt } = await login(data.username, data.password);\r\n      await auth.login(data.username, data.password); // We have moved the above logic to authService of extracting the data object.\r\n      //console.log(jwt);\r\n      // The following line store the token on local storage. it can be checked from the browser application tab under local storage\r\n      //localStorage.setItem(\"token\", jwt); Moved this line to authService\r\n      //this.props.history.push(\"/\");\r\n      const { state } = this.props.location;\r\n      window.location = state ? state.from.pathname : \"/\"; // window.location is used to reload the page and remount and in the right state. because username is not showing on first time login if we use Redirect option\r\n    } catch (ex) {\r\n      if (ex.response && ex.response.status === 400) {\r\n        const errors = { ...this.state.errors };\r\n        errors.username = ex.response.data;\r\n        this.setState({ errors });\r\n      }\r\n    }\r\n  };\r\n  // We will use ES6 computed properties to get the name of the element\r\n  //   validateProperty = ({ name, value }) => {\r\n  //     const obj = { [name]: value };\r\n  //     // We can't use this.schema which is entire form so we will get a sub schema from the main schema and get only the field which we are validating.\r\n  //     const schema = { [name]: this.schema[name] };\r\n  //     const { error } = Joi.validate(obj, schema);\r\n\r\n  //     return error ? error.details[0].message : null;\r\n  //     // if (error) return null;\r\n  //     // return error.details[0].message;\r\n\r\n  //     // if (name === \"username\") {\r\n  //     //   if (value.trim() === \"\") return \"Username is required.\";\r\n  //     //   // ...\r\n  //     // }\r\n  //     // if (name === \"password\") {\r\n  //     //   if (value.trim() === \"\") return \"password is required\";\r\n  //     //   // ...\r\n  //     // }\r\n  //   };\r\n\r\n  //   handleChange = (e) => {\r\n  // Since we don't need any other property so we will get only currentTarget as a parameter\r\n  //   handleChange = ({ currentTarget: input }) => {\r\n  //     const errors = { ...this.state.errors };\r\n  //     const errorMessage = this.validateProperty(input);\r\n  //     if (errorMessage) errors[input.name] = errorMessage;\r\n  //     else delete errors[input.name];\r\n  //     const data = { ...this.state.data };\r\n  //     //data.username = e.currentTarget.value;\r\n  //     data[input.name] = input.value; // We can access the state when passed as a parameter like this\r\n  //     this.setState({ data, errors });\r\n  //   };\r\n\r\n  render() {\r\n    // Redirect the user to home page if the user is already login\r\n    if (auth.getCurrentUser()) return <Redirect to=\"/\" />;\r\n\r\n    // const { data, errors } = this.state;\r\n    return (\r\n      <div>\r\n        <h1>Login</h1>\r\n        {/* form>(div.form-group>label+input.form-control)*2 */}\r\n        <form onSubmit={this.handleSubmit}>\r\n          {/* <Input\r\n            name=\"username\"\r\n            value={data.username}\r\n            label=\"Username\"\r\n            onChange={this.handleChange}\r\n            error={errors.username}\r\n          /> */}\r\n\r\n          {this.renderInput(\"username\", \"Username\")}\r\n          {this.renderInput(\"password\", \"Password\", \"password\")}\r\n          {/* We have extracted the following Component to generalize the code */}\r\n          {/* <div className=\"form-group\">\r\n            <label htmlFor=\"username\">Username</label>\r\n            <input\r\n              //autoFocus\r\n              //ref={this.userName} // This ref attribute is used to refer this element with userName\r\n              value={data.username} // controlled elements\r\n              onChange={this.handleChange}\r\n              id=\"username\"\r\n              name=\"username\"\r\n              type=\"text\"\r\n              className=\"form-control\"\r\n            />\r\n          </div> */}\r\n          {/* <Input\r\n            name=\"password\"\r\n            value={data.password}\r\n            label=\"Password\"\r\n            onChange={this.handleChange}\r\n            error={errors.password}\r\n          /> */}\r\n          {/* <div className=\"form-group\">\r\n            <label htmlFor=\"password\">Password</label>\r\n            <input\r\n              value={data.password}\r\n              onChange={this.handleChange}\r\n              name=\"password\"\r\n              id=\"password\"\r\n              type=\"text\"\r\n              className=\"form-control\"\r\n            />\r\n          </div> */}\r\n          {/* button.btn.btn-primary */}\r\n          {/* Disable button if the form is not valid. Call the validate method */}\r\n          {/* <button disabled={this.validate()} className=\"btn btn-primary\">\r\n            Login\r\n          </button> */}\r\n\r\n          {/* Call the renderButton method to show button with login label */}\r\n          {this.renderButton(\"Login\")}\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default LoginForm;\r\n","import http from \"./httpService\";\r\n//import { apiUrl } from \"../config.json\";\r\n\r\n// const apiEndPoint = apiUrl + \"/users\";\r\nconst apiEndPoint = \"/users\";\r\n\r\nexport function register(user) {\r\n  return http.post(apiEndPoint, {\r\n    email: user.username,\r\n    password: user.password,\r\n    name: user.name,\r\n  });\r\n}\r\n","import React from \"react\";\r\nimport Form from \"./common/form\";\r\nimport Joi from \"joi-browser\";\r\n//import { register } from \"./../services/userService\"; // import register only\r\nimport * as userService from \"./../services/userService\"; // import all objects\r\nimport auth from \"../services/authService\";\r\n\r\nclass RegisterForm extends Form {\r\n  state = {\r\n    data: { username: \"\", password: \"\", name: \"\" },\r\n    errors: {},\r\n  };\r\n\r\n  schema = {\r\n    username: Joi.string().required().email().label(\"Username\"),\r\n    password: Joi.string().required().min(5).label(\"Password\"),\r\n    name: Joi.string().required().label(\"Name\"),\r\n  };\r\n\r\n  doSubmit = async () => {\r\n    try {\r\n      const response = await userService.register(this.state.data);\r\n      //console.log(response);\r\n      // to store the token on local storage. This token can be seen in the application tab of the browser console.\r\n      // https://jwt.io/ // This website can be used to verify the tocken. go to the debugger page and paste the token and see the payload section\r\n      //localStorage.setItem(\"token\", response.headers[\"x-auth-token\"]);\r\n      auth.loginWithJwt(response.headers[\"x-auth-token\"]);\r\n      //this.props.history.push(\"/\");\r\n      window.location = \"/\"; // Full reload because username is not showing on first time registration\r\n    } catch (ex) {\r\n      if (ex.response && ex.response.status === 400) {\r\n        const errors = { ...this.state.errors };\r\n        errors.username = ex.response.data;\r\n        this.setState({ errors });\r\n      }\r\n    }\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h1>Register</h1>\r\n        <form onSubmit={this.handleSubmit}>\r\n          {this.renderInput(\"username\", \"Username\")}\r\n          {this.renderInput(\"password\", \"Password\", \"password\")}\r\n          {this.renderInput(\"name\", \"Name\")}\r\n          {this.renderButton(\"Save\")}\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default RegisterForm;\r\n","import React, { Component } from \"react\";\r\n//import { logout } from \"../services/authService\";\r\nimport auth from \"../services/authService\";\r\n\r\nclass Logout extends React.Component {\r\n  componentDidMount() {\r\n    //localStorage.removeItem(\"token\");\r\n    //logout();\r\n    auth.logout();\r\n    window.location = \"/\";\r\n  }\r\n  render() {\r\n    return null;\r\n  }\r\n}\r\n\r\nexport default Logout;\r\n","import React from \"react\";\r\nimport { Route, Redirect } from \"react-router-dom\";\r\nimport auth from \"../../services/authService\";\r\n\r\nconst ProtectedRoute = ({ path, component: Component, render, ...rest }) => {\r\n  return (\r\n    <Route\r\n      //   path={path} // Commented because rest will have the path prop\r\n      {...rest}\r\n      render={(props) => {\r\n        if (!auth.getCurrentUser())\r\n          return (\r\n            //<Redirect to=\"/login\" />;\r\n            // Redirect the user to the same page after login from the location prop\r\n            <Redirect\r\n              to={{\r\n                pathname: \"/login\",\r\n                state: { from: props.location },\r\n              }}\r\n            />\r\n          );\r\n\r\n        return Component ? <Component {...props} /> : render(props);\r\n      }}\r\n    />\r\n  );\r\n};\r\n\r\nexport default ProtectedRoute;\r\n","import React from \"react\";\nimport { Route, Redirect, Switch } from \"react-router-dom\";\nimport { ToastContainer } from \"react-toastify\"; // Install from terminal.\n//import jwtdecode from \"jwt-decode\"; // npm i jwt-decode@2.2.0\nimport Movies from \"./components/movies\";\nimport Customers from \"./components/customers\";\nimport Rentals from \"./components/rentals\";\nimport NotFound from \"./components/notFound\";\nimport MovieForm from \"./components/movieForm\";\nimport NavBar from \"./components/navBar\";\nimport LoginForm from \"./components/loginForm\";\nimport RegisterForm from \"./components/registerForm\";\nimport Logout from \"./components/logout\";\nimport ProtectedRoute from \"./components/common/protectedRoute\";\nimport auth from \"./services/authService\";\nimport \"react-toastify/dist/ReactToastify.css\";\nimport \"./App.css\";\n\nclass App extends React.Component {\n  state = {};\n\n  componentDidMount() {\n    // // if the token is not available it will give error so to handle it add try catch block.\n    // try {\n    //   const jwt = localStorage.getItem(\"token\");\n    //   const user = jwtdecode(jwt);\n    //   //console.log(user);\n    //   this.setState({ user });\n    // } catch (ex) {}\n    const user = auth.getCurrentUser();\n    this.setState({ user });\n  }\n\n  render() {\n    const { user } = this.state;\n    return (\n      <React.Fragment>\n        <ToastContainer />\n        <NavBar user={user} />\n        <main className=\"container\">\n          {/* Route[path][component]*4 */}\n          <Switch>\n            <Route path=\"/register\" component={RegisterForm} />\n            <Route path=\"/login\" component={LoginForm} />\n            <Route path=\"/logout\" component={Logout} />\n            <ProtectedRoute path=\"/movies/:id\" component={MovieForm} />\n            {/* <Route\n              path=\"/movies/:id\"\n              render={(props) => {\n                if (!user) return <Redirect to=\"/login\" />;\n                return <MovieForm {...props} />;\n              }}\n            /> */}\n            {/* <Route path=\"/movies/new\" component={MovieForm} /> */}\n            {/* <Route path=\"/movies\" component={Movies} /> */}\n            {/* if you want to pass props use render instead of component */}\n            <Route\n              path=\"/movies\"\n              render={(props) => <Movies {...props} user={this.state.user} />}\n            />\n            <Route path=\"/customers\" component={Customers} />\n            <Route path=\"/rentals\" component={Rentals} />\n            <Route path=\"/not-found\" component={NotFound} />\n            <Redirect from=\"/\" exact to=\"movies\" />\n            <Redirect to=\"not-found\" />\n          </Switch>\n          {/* <Movies></Movies> */}\n        </main>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport \"font-awesome/css/font-awesome.css\";\n\nconsole.log(\"SUPERMAN\", process.env.REACT_APP_NAME);\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}